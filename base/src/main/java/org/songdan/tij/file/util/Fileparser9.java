package org.songdan.tij.file.util;

import com.google.common.base.Joiner;
import com.google.common.base.Splitter;
import com.google.common.collect.Lists;
import com.google.common.collect.Maps;
import com.google.common.collect.Sets;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import java.io.IOException;
import java.net.URISyntaxException;
import java.util.*;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

/**
 * 范围推送
 *
 * @author song dan
 * @since 24 十一月 2017
 */
public class Fileparser9 {

	public static void main(String[] args) throws IOException, URISyntaxException {
		File file = new File("/Users/songdan/Desktop/error_area.log");
		List<String> list = extractSingleStr(new BufferedReader(new FileReader(file)));
		Set<String> poiIdSet = new LinkedHashSet<>();
		Map<String, Set<String>> poiCodeMap = Maps.newHashMap();
		for (String str : list) {
			if (!str.contains("batchActiveWmPoiSpArea")) {
				continue;
			}
			String poiIdsStr = str.substring(str.indexOf("[args[0]:[") + 10, str.indexOf("];args[1]"));
			String code = str.substring(str.indexOf("args[1]:\"") + 9, str.indexOf("\";args[2]"));
			String[] arr = poiIdsStr.split(",");
			for (String poi : arr) {
				Set<String> codeList = poiCodeMap.getOrDefault(poi, Sets.newHashSet());
				codeList.add(code);
				poiCodeMap.put(poi, codeList);
			}
		}
		for (Map.Entry<String, Set<String>> entry : poiCodeMap.entrySet()) {
			if (entry.getValue().size() > 1) {
				System.out.println(entry);
				poiIdSet.add(entry.getKey());
			}
		}


		System.out.println(poiIdSet.size());
		StringBuilder build = new StringBuilder("(");
		for (String wmPoiId : poiIdSet) {
			build.append(wmPoiId);
			build.append(",");
		}
		build.append(")");
		System.out.println(build);
		String str = "10185267,2838499,3093500,5125042,5796040,6985302,7055082,7509451,9240276,9712507,9932493,10011670,10017238,10024511,10033292,1003355,1003386,10035649,10050298,10051897,10075583,10086448,10143564,10157106,10166144,10166738,10172960,10177169,10181625,10188328,10188645,10189337,10204708,10216471,10231441,10232413,10268267,10282805,10283972,10285369,10295773,10319697,10335017,10341511,10362294,10365465,1039719,10401351,10462153,10541805,1059611,10599310,10607033,1063809,1117801,1138380,1208033,1241785,1308816,1308820,1321607,1507186,1534334,1575356,1612202,16278,1661031,1662682,1675244,1733090,1733499,1757324,1811872,1825683,1834807,1844147,1847175,1889313,1897778,1900195,1929964,1950760,1950763,1950764,2002829,2009170,2062160,2079313,2083271,2083272,2099356,2125488,2167339,2226008,2327744,2339648,2370182,2380704,2391978,2425818,2481335,2556393,2572138,2575152,2612178,2680519,2837420,2874333,2960451,2967290,2981775,3043317,3054475,3104265,3104283,3117232,3156118,3156590,3170683,3175015,3212070,3252009,3252023,3269120,327888,328483,3299036,3384166,340648,340663,3480502,3482524,3575557,3580553,3595737,3700429,3701556,3709629,3718298,3726819,3742332,3765229,3766936,3781957,3819297,3895927,392071,3945614,3963370,3973732,3980164,4071143,4078570,4116427,4120187,4174606,4184274,4203259,4222914,4232109,4265747,428028,4291461,433370,4394962,4421592,4460193,4465598,4499260,4522373,453327,4538200,4551057,4565895,4571366,4575519,4603424,4625995,4656012,4680515,4692119,4692310,4706823,4717671,4774821,4786889,4822868,483676,4903679,4937125,4944101,496425,4969401,4970308,5007101,5023135,5048972,5071809,5110388,5130316,5161896,5181897,5227217,5231256,5231267,5266791,5275841,5280378,5340695,5343614,535509,5365737,5405105,5419238,5433298,5472221,5515676,5550745,5570494,5577618,5593871,5686700,5707039,5708859,5711574,5749069,5800320,5813842,582609,5868077,5869582,5914397,5966629,6045703,6054399,6076200,6080457,6081783,6090348,609161,6095366,6121704,612755,6144467,616648,6171385,6179731,621518,6274971,6280536,6319285,6338451,6363863,6365623,6367414,6432294,6434566,6464353,6465036,6528544,6537685,6597713,660704,661597,6635008,6643723,6644006,667312,6707766,6739298,6747416,6768333,6786902,6816855,6826486,6843542,6890138,6896403,6902342,6918440,692859,6937223,6940352,7020856,7033383,7115751,7120042,7123739,7141531,7195568,7204454,7206050,7227584,7230149,7290331,7358425,7361747,7374711,7408139,7416068,7416357,743633,743669,7464158,7470172,7500317,7506912,752739,7583340,7599372,7601928,7609943,7615387,7664438,7666080,7697967,7703330,7704157,7704484,7756148,7761650,7767659,7794779,7805086,785317,7854962,785779,7906043,7942565,7949586,7979712,7981949,7995035,799896,8000447,8017065,8017545,8020545,8038176,8059553,8062956,8107737,8117851,8146137,8150936,8168255,8201664,8217868,8228006,8232753,8235988,827653,8300449,8305686,8318258,8324661,8325003,8353848,8362398,8380913,8403472,8407160,8452615,8452628,846280,8486246,8494956,8497976,8513021,8520471,8534337,8549774,8574963,8577462,8609574,8626287,8638259,8652340,866049,8664774,8673071,8683248,8700818,8714059,8714166,8753091,8764273,8764351,8790577,8797312,8836439,8861572,8863987,8887114,8892361,8895651,890148,8926803,8965869,8973187,9031396,9042196,9051055,9100694,9106146,9138621,9147247,9149324,9157481,9175942,9185794,9198562,9199549,920563,9212600,9229830,9232316,9247574,9252497,9264117,9265447,9268527,9269731,9286236,9292553,929465,9296435,9315970,9361814,937373,9389042,9407918,9443296,9497784,9501464,9502898,9510434,9511858,9544741,9553623,9555368,9565645,9568094,9650316,9676511,9681212,9688414,9695567,9697772,9714366,9727097,9730918,9739905,975447,9792348,9799088,9799672,9822011,9829814,9832196,9836785,9836944,9837444,9838420,9856487,9876818,9892902,9898832,9903978,9916688,9919276,9921042,9931199,9939697,996996,9977585,9982960,9991977";
		List<String> set1 = Lists.newArrayList(str.split(","));
		System.out.println(set1.subList(0,200));
		System.out.println(set1.subList(200,set1.size()-1));
//		set1.removeAll(poiIdSet);
//		System.out.println(set1.size());
		poiIdSet.removeAll(set1);
		System.out.println(poiIdSet.size());
		System.out.println(Joiner.on(",").join(poiIdSet));
		String str2 = "4499260,2230268,3587859,5215114,5969859,4499260,2151182,2930403,9307832,10063365,10199081,7828170,10063365,10199081,2151182,2230268,2930403,3587859,5215114,5969859,9307832,7828170";
		Set<String> set2 = Sets.newHashSet(str2.split(","));
		String str3 = "7647423, 3432108, 3275626, 6641237, 9837134, 5374209, 6658925, 1688762, 6653234, 2577482, 194649, 4241054, 3212487, 6204572, 3539865, 7396725, 2117270, 6571086, 9762761, 8078014, 2089507, 6609991, 7571992, 3426912, 2829442, 8767564, 9359443, 9851601, 10240032, 10733942, 6551278, 6547312, 5393358, 10063365, 1841765, 5616472, 6233768, 8985473, 3239158, 8578104, 5192056, 124198, 10666804, 5607703, 10182312, 6827644, 7343190, 661473, 2791873, 7764467, 5137127, 3711275, 552372, 2717276, 6339419, 6497262, 5675399, 6705894, 6143212, 586164, 9721724, 2133027, 1567210, 5549151, 3475520, 9180387, 3098400, 4527730, 1922230, 1283824, 2870409, 2617500, 8049485, 960705, 2349269, 2479414, 359267, 359265, 7454349, 6543649, 7299363, 6774853, 6656671, 1044633, 3977393, 5657316, 6174598, 2470454, 3922095, 2627709, 2963601, 8531816, 1809112, 5876257, 6205596, 5132473, 2430408, 4854829, 3914780, 5634393, 6700676, 4391273, 10717958, 9378035, 6794753, 2809937, 4447101, 2099882, 3213211, 6851890, 3167231, 3259050, 3518819, 9111099, 6132923, 1698487, 2854981, 8566285, 4474358, 356556, 3214982, 6265017, 5438696, 2458812, 10199081, 1304475, 9205021, 6700854, 2964135, 9638301, 2545387, 2686300, 1897848, 5266992, 4797250, 2447753, 6580421, 5679614, 2412626, 1680488, 6103093, 3199311, 10706263, 2761096, 795697, 9009985, 9580004, 2878242, 3521543, 6828348, 1048484, 1113934, 5612906, 6671534, 5553321, 7269073, 574270, 3215048, 1728838, 4279234, 3935658, 2142283, 6550864, 3231096, 10070362, 2531504, 6188408, 5085216, 1922172, 1922175, 9512156, 6290465, 7828170, 2101963, 9539202, 992011, 3895194, 5408186, 4247442, 6402853, 2125732, 5869930, 2689223";
		Set<String> set3 = Sets.newHashSet(Splitter.on(",").trimResults().split(str3));
		System.out.println(Joiner.on(",").join(org.songdan.tij.generics.Sets.<String>difference(set2, set3)));
		System.out.println(poiIdSet.size());
	}

	private static List<String> extractSingleStr(BufferedReader reader) throws IOException {
		List<String> set = new ArrayList<>();
		String str;
		while ((str = reader.readLine()) != null) {
			set.add(str);
		}
		return set;
	}

}
